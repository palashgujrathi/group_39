sliderInput("Years",
"Range of Years:",
choices=c("Alaska", "Arizona", "Washington")
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("main Panel")
)
)
))
setwd("~/Documents/INFO 201/a8_demo")
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
# Define UI for application that draws a histogram
shinyUI <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("State",
"Select a State",
choices=c("Alaska", "Arizona", "Washington")
),
sliderInput("Years",
"Range of Years:",
choices=c("Alaska", "Arizona", "Washington")
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("main Panel")
)
)
))
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(plotly)
install.packages("plotly")
data <- read.csv("Minimum Wage Data copy.csv", stringsAsFactors = FALSE)
runApp()
runApp()
runApp()
help("selectInput")
runApp()
data <- read.csv("Minimum Wage Data copy.csv", stringsAsFactors = FALSE)
runApp()
runApp()
runApp()
library(shiny)
data <- read.csv("Minimum Wage Data copy.csv", stringsAsFactors = FALSE)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Minimum wages across US states from 1968 to 2017"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("years",
"Range of years",
min = 1968,
max = 2017,
value = 1968)
),
selectInput(inputId="States",
label = "select a state", choices=c("Alabama", "Alaska","Arizona"),
selected = "Alabama", multiple = TRUE),
# Show a plot of the generated distribution
mainPanel(
plotOutput("linePlot")
)
)
))
library(shiny)
library(ggplot2)
library(plotly)
data <- read.csv("Minimum Wage Data copy.csv", stringsAsFactors = FALSE)
# Define server logic required to draw a histogram
shinyServer <- function(input, output) {
output$linePlot <- renderPlot({
x <- data$Year
y <- data$High.2018
p <- plot_ly(data, x = ~x, y = ~y, type = 'scatter', mode = 'lines')
return(p)
})
}
library(shiny)
data <- read.csv("Minimum Wage Data copy.csv", stringsAsFactors = FALSE)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Minimum wages across US states from 1968 to 2017"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("years",
"Range of years",
min = 1968,
max = 2017,
value = 1968)
),
selectInput(inputId="States",
label = "select a state", choices=c("Alabama", "Alaska","Arizona"),
selected = "Alabama"),
# Show a plot of the generated distribution
mainPanel(
plotOutput("linePlot")
)
)
))
library(shiny)
data <- read.csv("Minimum Wage Data copy.csv", stringsAsFactors = FALSE)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Minimum wages across US states from 1968 to 2017"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("years",
"Range of years",
min = 1968,
max = 2017,
value = 1968)
),
# selectInput(inputId="States",
#             label = "select a state", choices=c("Alabama", "Alaska","Arizona"),
#             selected = "Alabama"),
# Show a plot of the generated distribution
mainPanel(
plotOutput("linePlot")
)
)
))
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
library(plotly)
data <- read.csv("Minimum Wage Data copy.csv", stringsAsFactors = FALSE)
# Define server logic required to draw a histogram
shinyServer <- function(input, output) {
output$linePlot <- renderPlot({
state_name <- filter(data, State=input)
x <- data$Year
y <- data$High.2018
p <- plot_ly(data, x = ~x, y = ~y, type = 'scatter', mode = 'lines')
return(p)
})
}
library(shiny)
library(ggplot2)
library(plotly)
data <- read.csv("Minimum Wage Data copy.csv", stringsAsFactors = FALSE)
# Define server logic required to draw a histogram
shinyServer <- function(input, output) {
output$linePlot <- renderPlot({
state_name <- filter(data, State=input)
x <- data$Year
y <- data$High.2018
p <- plot_ly(data, x = ~x, y = ~y, type = 'scatter', mode = 'lines')
return(p)
})
}
View(shinyServer)
shinyServer("Alabama", )
filter(data, State=input)
filter(data, State="input"Alabama")
state_name <- filter(data, State="Alabama")
state.name
runApp()
runApp()
runApp()
filter(data, State=="Alabama")
runApp()
runApp()
runApp()
runApp()
library(plotly)
data <- read.csv("Minimum Wage Data copy.csv", stringsAsFactors = FALSE)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Minimum wages across US states from 1968 to 2017"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("years",
"Range of years",
min = 1968,
max = 2017,
value = c(1968, 2000)),
selectInput(inputId="States",
label = "Select a state", choices=state.name, #c("Alabama", "Alaska","Arizona"),
selected = "Alabama")),
# Show a plot of the generated distribution
mainPanel(
plotOutput("linePlot")
)
)
))
runApp()
library(shiny)
library(ggplot2)
library(plotly)
data <- read.csv("Minimum Wage Data copy.csv", stringsAsFactors = FALSE)
# Define server logic required to draw a histogram
shinyServer <- function(input, output) {
output$linePlot <- renderPlot({
state_name <- filter(data, State==input)
year_selected <- filter(state_name, Year>=paste0(input$years) & Year<=paste0(input$years))
x <- data$Year
y <- data$High.2018
p <- plot_ly(data, x = ~x, y = ~y, type = 'scatter', mode = 'lines')
return(p)
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
state_name
state_name <- filter(data, State==input)
filter(data, State==input)
runApp()
runApp()
filter(data, State=="Alabama")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(plot_ly())
help("plot_ly")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
help("geom_line")
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
View(data)
data <- select(data, Year, State, High.Value, Low.Value, CPI.Average, High.2018, Low.2018)
View(data)
help("usmap")
library(usmap)
runApp()
runApp()
filter(data, Year=="2000")
runApp()
runApp()
library(shiny)
library(plotly)
library(ggplot2)
library(shinythemes)
library(usmap)
data <- read.csv("Minimum Wage Data copy.csv", stringsAsFactors = FALSE)
# Define UI for application that draws a histogram
shinyUI(fluidPage(theme = shinytheme("cyborg"),
# Application title
titlePanel("Minimum wages across US states from 1968 to 2017"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId="states",
label = "Select a state", choices=state.name,
selected = "Washington", multiple = TRUE),
selectInput(inputId="year", label = "Select a year", choices = c(1968:2017),
selected = "1968"),
sliderInput("years",
"Range of years",
min = 1968,
max = 2017,
value = c(1968, 2000))),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("High Value", plotlyOutput("highPlot")),
tabPanel("Low Vaue", plotlyOutput("lowPlot")),
tabPanel("Map", usmapOutput("mapOutput"))
)
)
))
)
runApp()
state_name <- filter(data, Year==input$year)
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(state_name)[2] <- "state"
graph <- plot_usmap("state", data = state_name, values = "High.Value", lines = "white") +
scale_fill_continuous(name = "Low Value", label = scales::comma) +
ggtitle("Total No. of votes in 2016") +
theme(legend.position = "right")
return(graph)
state_name <- filter(data, Year=="2000")
# year_selected <- filter(state_name, Year>=input$years[1] & Year<=input$years[2])
# x <- year_selected$Year
# y <- year_selected$High.Value
colnames(state_name)[2] <- "state"
graph <- plot_usmap("state", data = state_name, values = "High.Value", lines = "white") +
scale_fill_continuous(name = "Low Value", label = scales::comma) +
ggtitle("Total No. of votes in 2016") +
theme(legend.position = "right")
graph
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/INFO 201/group_39')
runApp('~/Documents/INFO 201/group_39')
library(shinythemes)
runApp('~/Documents/INFO 201/group_39')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/INFO 201/a8-app-palashgujrathi')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
filter(data, State == "Washington") %>% ggplot() + geom_line(aes(x = Year, y = CPI.Average, color = State))
filter(data, State == "Florida") %>% ggplot() + geom_line(aes(x = Year, y = CPI.Average, color = State))
filter(data, State == "Washington") %>% ggplot() + geom_line(aes(x = Year, y = CPI.Average, color = State))
filter(data, State == "Florida") %>% ggplot() + geom_line(aes(x = Year, y = CPI.Average, color = State))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
which.max(data$High.Value)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
4500:39023
which(data$Year)
typeof(data$Year)
typeof(4500)
runApp()
options(scipen=999)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Documents/INFO 201/group_39")
runApp()
runApp()
runApp()
